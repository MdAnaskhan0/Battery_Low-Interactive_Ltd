"use strict";
/**
  * @reach/accordion v0.18.0
  *
  * Copyright (c) 2018-2022, React Training LLC
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE.md file in the root directory of this source tree.
  *
  * @license MIT
  */


// src/reach-accordion.tsx
import * as React from "react";
import {
  createContext,
  makeId,
  noop,
  useComposedRefs,
  useControlledState,
  composeEventHandlers,
  useStatefulRefValue
} from "@reach/utils";
import {
  createDescendantContext,
  DescendantProvider,
  useDescendant,
  useDescendantKeyDown,
  useDescendantsInit
} from "@reach/descendants";
import { useId } from "@reach/auto-id";
var AccordionDescendantContext = createDescendantContext("AccordionDescendantContext");
var [AccordionProvider, useAccordionCtx] = createContext("Accordion");
var [AccordionItemProvider, useAccordionItemCtx] = createContext("AccordionItem");
var AccordionStates = /* @__PURE__ */ ((AccordionStates2) => {
  AccordionStates2["Open"] = "OPEN";
  AccordionStates2["Collapsed"] = "COLLAPSED";
  return AccordionStates2;
})(AccordionStates || {});
var Accordion = React.forwardRef(function Accordion2({
  as: Comp = "div",
  children,
  defaultIndex,
  index: controlledIndex,
  onChange,
  readOnly = false,
  collapsible = false,
  multiple = false,
  ...props
}, forwardedRef) {
  let [openPanels, setOpenPanels] = useControlledState({
    controlledValue: controlledIndex,
    defaultValue: () => {
      if (defaultIndex != null) {
        if (multiple) {
          return Array.isArray(defaultIndex) ? defaultIndex : [defaultIndex];
        } else {
          return Array.isArray(defaultIndex) ? defaultIndex[0] ?? 0 : defaultIndex;
        }
      }
      if (collapsible) {
        return multiple ? [] : -1;
      }
      return multiple ? [0] : 0;
    },
    calledFrom: "Tabs"
  });
  let [descendants, setDescendants] = useDescendantsInit();
  let id = useId(props.id);
  let onSelectPanel = React.useCallback((index) => {
    onChange && onChange(index);
    setOpenPanels((prevOpenPanels) => {
      index = index;
      if (multiple) {
        prevOpenPanels = prevOpenPanels;
        if (prevOpenPanels.includes(index)) {
          if (prevOpenPanels.length > 1 || collapsible) {
            return prevOpenPanels.filter((i) => i !== index);
          }
        } else {
          return [...prevOpenPanels, index].sort();
        }
      } else {
        prevOpenPanels = prevOpenPanels;
        return prevOpenPanels === index && collapsible ? -1 : index;
      }
      return prevOpenPanels;
    });
  }, [collapsible, multiple, onChange, setOpenPanels]);
  return /* @__PURE__ */ React.createElement(DescendantProvider, {
    context: AccordionDescendantContext,
    items: descendants,
    set: setDescendants
  }, /* @__PURE__ */ React.createElement(AccordionProvider, {
    accordionId: id,
    openPanels,
    onSelectPanel: readOnly ? noop : onSelectPanel,
    readOnly
  }, /* @__PURE__ */ React.createElement(Comp, {
    ...props,
    ref: forwardedRef,
    "data-reach-accordion": ""
  }, children)));
});
Accordion.displayName = "Accordion";
var AccordionItem = React.forwardRef(function AccordionItem2({ as: Comp = "div", children, disabled = false, index: indexProp, ...props }, forwardedRef) {
  let { accordionId, openPanels, readOnly } = useAccordionCtx("AccordionItem");
  let buttonRef = React.useRef(null);
  let [element, handleButtonRefSet] = useStatefulRefValue(buttonRef, null);
  let descendant = React.useMemo(() => {
    return {
      element,
      disabled
    };
  }, [disabled, element]);
  let index = useDescendant(descendant, AccordionDescendantContext, indexProp);
  let itemId = makeId(accordionId, index);
  let panelId = makeId("panel", itemId);
  let buttonId = makeId("button", itemId);
  let state = (Array.isArray(openPanels) ? openPanels.includes(index) && "OPEN" /* Open */ : openPanels === index && "OPEN" /* Open */) || "COLLAPSED" /* Collapsed */;
  let context = {
    buttonId,
    buttonRef,
    disabled,
    handleButtonRefSet,
    index,
    itemId,
    panelId,
    state
  };
  return /* @__PURE__ */ React.createElement(AccordionItemProvider, {
    ...context
  }, /* @__PURE__ */ React.createElement(Comp, {
    ...props,
    ref: forwardedRef,
    "data-reach-accordion-item": "",
    "data-state": getDataState(state),
    "data-disabled": disabled ? "" : void 0,
    "data-read-only": readOnly ? "" : void 0
  }, children));
});
AccordionItem.displayName = "AccordionItem";
var AccordionButton = React.forwardRef(function AccordionButton2({
  as: Comp = "button",
  children,
  onClick,
  onKeyDown,
  onMouseDown,
  onPointerDown,
  tabIndex,
  ...props
}, forwardedRef) {
  let { onSelectPanel } = useAccordionCtx("AccordionButton");
  let {
    disabled,
    buttonId,
    buttonRef: ownRef,
    handleButtonRefSet,
    index,
    panelId,
    state
  } = useAccordionItemCtx("AccordionButton");
  let ref = useComposedRefs(forwardedRef, handleButtonRefSet);
  function handleClick(event) {
    event.preventDefault();
    if (disabled) {
      return;
    }
    ownRef.current.focus();
    onSelectPanel(index);
  }
  let handleKeyDown = useDescendantKeyDown(AccordionDescendantContext, {
    currentIndex: index,
    orientation: "vertical",
    key: "element",
    rotate: true,
    callback(element) {
      element?.focus();
    },
    filter: (button) => !button.disabled
  });
  return /* @__PURE__ */ React.createElement(Comp, {
    "aria-controls": panelId,
    "aria-expanded": state === "OPEN" /* Open */,
    tabIndex: disabled ? -1 : tabIndex,
    ...props,
    ref,
    "data-reach-accordion-button": "",
    "data-state": getDataState(state),
    disabled: disabled || void 0,
    id: buttonId,
    onClick: composeEventHandlers(onClick, handleClick),
    onKeyDown: composeEventHandlers(onKeyDown, handleKeyDown)
  }, children);
});
AccordionButton.displayName = "AccordionButton";
var AccordionPanel = React.forwardRef(function AccordionPanel2({ as: Comp = "div", children, ...props }, forwardedRef) {
  let { disabled, panelId, buttonId, state } = useAccordionItemCtx("AccordionPanel");
  return /* @__PURE__ */ React.createElement(Comp, {
    hidden: state !== "OPEN" /* Open */,
    role: "region",
    "aria-labelledby": buttonId,
    ...props,
    ref: forwardedRef,
    "data-reach-accordion-panel": "",
    "data-disabled": disabled || void 0,
    "data-state": getDataState(state),
    id: panelId
  }, children);
});
AccordionPanel.displayName = "AccordionPanel";
function useAccordionContext() {
  let { openPanels, accordionId } = useAccordionCtx("useAccordionContext");
  return React.useMemo(() => {
    let panels = [];
    return {
      id: accordionId,
      openPanels: panels.concat(openPanels).filter((i) => i >= 0)
    };
  }, [accordionId, openPanels]);
}
function useAccordionItemContext() {
  let { index, state } = useAccordionItemCtx("useAccordionItemContext");
  return React.useMemo(() => ({
    index,
    isExpanded: state === "OPEN" /* Open */
  }), [index, state]);
}
function getDataState(state) {
  return state === "OPEN" /* Open */ ? "open" : "collapsed";
}
export {
  Accordion,
  AccordionButton,
  AccordionItem,
  AccordionPanel,
  AccordionStates,
  useAccordionContext,
  useAccordionItemContext
};
