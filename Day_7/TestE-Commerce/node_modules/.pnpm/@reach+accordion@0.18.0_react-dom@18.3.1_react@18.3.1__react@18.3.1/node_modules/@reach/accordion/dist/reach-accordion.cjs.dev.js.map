{"version":3,"sources":["../src/reach-accordion.tsx"],"sourcesContent":["/**\n * Welcome to @reach/accordion!\n *\n * TODO: Animation examples\n *\n * @see Docs     https://reach.tech/accordion\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/accordion\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n */\n\nimport * as React from \"react\";\nimport {\n\tcreateContext,\n\tmakeId,\n\tnoop,\n\tuseComposedRefs,\n\tuseControlledState,\n\tcomposeEventHandlers,\n\tuseStatefulRefValue,\n} from \"@reach/utils\";\nimport type * as Polymorphic from \"@reach/polymorphic\";\nimport {\n\tcreateDescendantContext,\n\tDescendantProvider,\n\tuseDescendant,\n\tuseDescendantKeyDown,\n\tuseDescendantsInit,\n} from \"@reach/descendants\";\nimport { useId } from \"@reach/auto-id\";\n\nimport type { Descendant } from \"@reach/descendants\";\n\nconst AccordionDescendantContext = createDescendantContext<AccordionDescendant>(\n\t\"AccordionDescendantContext\"\n);\nconst [AccordionProvider, useAccordionCtx] =\n\tcreateContext<InternalAccordionContextValue>(\"Accordion\");\nconst [AccordionItemProvider, useAccordionItemCtx] =\n\tcreateContext<InternalAccordionItemContextValue>(\"AccordionItem\");\n\n////////////////////////////////////////////////////////////////////////////////\n\nenum AccordionStates {\n\tOpen = \"OPEN\",\n\tCollapsed = \"COLLAPSED\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Accordion\n *\n * The wrapper component for all other accordion components. Each accordion\n * component will consist of accordion items whose buttons are keyboard\n * navigable using arrow keys.\n *\n * @see Docs https://reach.tech/accordion#accordion-1\n */\nconst Accordion = React.forwardRef(function Accordion(\n\t{\n\t\tas: Comp = \"div\",\n\t\tchildren,\n\t\tdefaultIndex,\n\t\tindex: controlledIndex,\n\t\tonChange,\n\t\treadOnly = false,\n\t\tcollapsible = false,\n\t\tmultiple = false,\n\t\t...props\n\t},\n\tforwardedRef\n) {\n\tlet [openPanels, setOpenPanels] = useControlledState({\n\t\tcontrolledValue: controlledIndex,\n\t\tdefaultValue: () => {\n\t\t\tif (defaultIndex != null) {\n\t\t\t\t// If multiple is set to true, we need to make sure the `defaultIndex`\n\t\t\t\t// is an array (and vice versa).\n\t\t\t\tif (multiple) {\n\t\t\t\t\treturn Array.isArray(defaultIndex) ? defaultIndex : [defaultIndex];\n\t\t\t\t} else {\n\t\t\t\t\treturn Array.isArray(defaultIndex)\n\t\t\t\t\t\t? defaultIndex[0] ?? 0\n\t\t\t\t\t\t: defaultIndex!;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (collapsible) {\n\t\t\t\t// Collapsible accordions with no defaultIndex will start with all\n\t\t\t\t// panels collapsed.\n\t\t\t\treturn multiple ? [] : -1;\n\t\t\t}\n\n\t\t\t// Otherwise the first panel will be our default.\n\t\t\treturn multiple ? [0] : 0;\n\t\t},\n\t\tcalledFrom: \"Tabs\",\n\t});\n\n\tlet [descendants, setDescendants] = useDescendantsInit<AccordionDescendant>();\n\n\tlet id = useId(props.id);\n\n\tlet onSelectPanel = React.useCallback(\n\t\t(index: number) => {\n\t\t\tonChange && onChange(index);\n\n\t\t\tsetOpenPanels((prevOpenPanels) => {\n\t\t\t\t/*\n\t\t\t\t * If we're dealing with an uncontrolled component, the index arg\n\t\t\t\t * in selectChange will always be a number rather than an array.\n\t\t\t\t */\n\t\t\t\tindex = index as number;\n\t\t\t\t// multiple allowed\n\t\t\t\tif (multiple) {\n\t\t\t\t\t// state will always be an array here\n\t\t\t\t\tprevOpenPanels = prevOpenPanels as number[];\n\t\t\t\t\tif (\n\t\t\t\t\t\t// User is clicking on an already-open button\n\t\t\t\t\t\tprevOpenPanels.includes(index as number)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Other panels are open OR accordion is allowed to collapse\n\t\t\t\t\t\tif (prevOpenPanels.length > 1 || collapsible) {\n\t\t\t\t\t\t\t// Close the panel by filtering it from the array\n\t\t\t\t\t\t\treturn prevOpenPanels.filter((i) => i !== index);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Open the panel by adding it to the array.\n\t\t\t\t\t\treturn [...prevOpenPanels, index].sort();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprevOpenPanels = prevOpenPanels as number;\n\t\t\t\t\treturn prevOpenPanels === index && collapsible ? -1 : index;\n\t\t\t\t}\n\t\t\t\treturn prevOpenPanels;\n\t\t\t});\n\t\t},\n\t\t[collapsible, multiple, onChange, setOpenPanels]\n\t);\n\n\treturn (\n\t\t<DescendantProvider\n\t\t\tcontext={AccordionDescendantContext}\n\t\t\titems={descendants}\n\t\t\tset={setDescendants}\n\t\t>\n\t\t\t<AccordionProvider\n\t\t\t\taccordionId={id}\n\t\t\t\topenPanels={openPanels}\n\t\t\t\tonSelectPanel={readOnly ? noop : onSelectPanel}\n\t\t\t\treadOnly={readOnly}\n\t\t\t>\n\t\t\t\t<Comp {...props} ref={forwardedRef} data-reach-accordion=\"\">\n\t\t\t\t\t{children}\n\t\t\t\t</Comp>\n\t\t\t</AccordionProvider>\n\t\t</DescendantProvider>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", AccordionProps>;\n\n/**\n * @see Docs https://reach.tech/accordion#accordion-props\n */\ninterface AccordionProps {\n\t/**\n\t * `Accordion` can accept `AccordionItem` components as children.\n\t *\n\t * @see Docs https://reach.tech/accordion#accordion-children\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * Whether or not all panels of an uncontrolled accordion can be toggled\n\t * to a closed state. By default, an uncontrolled accordion will have an open\n\t * panel at all times, meaning a panel can only be closed if the user opens\n\t * another panel. This prop allows the user to collapse all open panels.\n\t *\n\t * It's important to note that this prop has no impact on controlled\n\t * components, since the state of any given accordion panel is managed solely\n\t * by the index prop.\n\t */\n\tcollapsible?: boolean;\n\t/**\n\t * A default value for the open panel's index or indices in an uncontrolled\n\t * accordion component when it is initially rendered.\n\t *\n\t * @see Docs https://reach.tech/accordion#accordion-defaultindex\n\t */\n\tdefaultIndex?: AccordionIndex;\n\t/**\n\t * The index or array of indices for open accordion panels. The `index` props\n\t * should be used along with `onChange` to create controlled accordion\n\t * components.\n\t *\n\t * @see Docs https://reach.tech/accordion#accordion-index\n\t */\n\tindex?: AccordionIndex;\n\t/**\n\t * The callback that is fired when an accordion item's open state is changed.\n\t *\n\t * @see Docs https://reach.tech/accordion#accordion-onchange\n\t */\n\tonChange?(index?: number): void;\n\t/**\n\t * Whether or not an uncontrolled accordion is read-only or controllable by a\n\t * user interaction.\n\t *\n\t * Generally speaking you probably want to avoid this, as\n\t * it can be confusing especially when navigating by keyboard. However, this\n\t * may be useful if you want to lock an accordion under certain conditions\n\t * (perhaps user authentication is required to access the content). In these\n\t * instances, you may want to include an alert when a user tries to activate\n\t * a read-only accordion panel to let them know why it does not toggle as may\n\t * be expected.\n\t *\n\t * TODO: Create example with @reach/alert.\n\t *\n\t * @see Docs https://reach.tech/accordion#accordion-onchange\n\t */\n\treadOnly?: boolean;\n\t/**\n\t * Whether or not multiple panels in an uncontrolled accordion can be opened\n\t * at the same time. By default, when a user opens a new panel, the previously\n\t * opened panel will close. This prop prevents that behavior.\n\t *\n\t * It's important to note that this prop has no impact on controlled\n\t * components, since the state of any given accordion panel is managed solely\n\t * by the index prop.\n\t */\n\tmultiple?: boolean;\n}\n\nAccordion.displayName = \"Accordion\";\n\n/**\n * AccordionItem\n *\n * A group that wraps a an accordion's button and panel components.\n *\n * @see Docs https://reach.tech/accordion#accordionitem\n */\nconst AccordionItem = React.forwardRef(function AccordionItem(\n\t{ as: Comp = \"div\", children, disabled = false, index: indexProp, ...props },\n\tforwardedRef\n) {\n\tlet { accordionId, openPanels, readOnly } = useAccordionCtx(\"AccordionItem\");\n\tlet buttonRef: ButtonRef = React.useRef(null);\n\n\tlet [element, handleButtonRefSet] = useStatefulRefValue<HTMLElement | null>(\n\t\tbuttonRef,\n\t\tnull\n\t);\n\tlet descendant = React.useMemo(() => {\n\t\treturn {\n\t\t\telement,\n\t\t\tdisabled,\n\t\t};\n\t}, [disabled, element]);\n\tlet index = useDescendant(descendant, AccordionDescendantContext, indexProp);\n\n\t// We need unique IDs for the panel and button to point to one another\n\tlet itemId = makeId(accordionId, index);\n\tlet panelId = makeId(\"panel\", itemId);\n\tlet buttonId = makeId(\"button\", itemId);\n\n\tlet state =\n\t\t(Array.isArray(openPanels)\n\t\t\t? openPanels.includes(index) && AccordionStates.Open\n\t\t\t: openPanels === index && AccordionStates.Open) ||\n\t\tAccordionStates.Collapsed;\n\n\tlet context: InternalAccordionItemContextValue = {\n\t\tbuttonId,\n\t\tbuttonRef,\n\t\tdisabled,\n\t\thandleButtonRefSet,\n\t\tindex,\n\t\titemId,\n\t\tpanelId,\n\t\tstate,\n\t};\n\n\treturn (\n\t\t<AccordionItemProvider {...context}>\n\t\t\t<Comp\n\t\t\t\t{...props}\n\t\t\t\tref={forwardedRef}\n\t\t\t\tdata-reach-accordion-item=\"\"\n\t\t\t\tdata-state={getDataState(state)}\n\t\t\t\tdata-disabled={disabled ? \"\" : undefined}\n\t\t\t\tdata-read-only={readOnly ? \"\" : undefined}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</Comp>\n\t\t</AccordionItemProvider>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", AccordionItemProps>;\n\n/**\n * @see Docs https://reach.tech/accordion#accordionitem-props\n */\ninterface AccordionItemProps {\n\t/**\n\t * An `AccordionItem` expects to receive an `AccordionButton` and\n\t * `AccordionPanel` components as its children, though you can also nest other\n\t * components within an `AccordionItem` if you want some persistant content\n\t * that is relevant to the section but not collapsible when the\n\t * `AccordionButton` is toggled.\n\t *\n\t * @see Docs https://reach.tech/accordion#accordionitem-children\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * Whether or not an accordion panel is disabled from user interaction.\n\t *\n\t * @see Docs https://reach.tech/accordion#accordionitem-disabled\n\t */\n\tdisabled?: boolean;\n\t/**\n\t * TODO: Document this!\n\t */\n\tindex?: number;\n}\n\nAccordionItem.displayName = \"AccordionItem\";\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AccordionButton\n *\n * The trigger button a user clicks to interact with an accordion.\n *\n * Must be a direct child of a `AccordionItem`.\n *\n * @see Docs https://reach.tech/accordion#accordionbutton\n */\nconst AccordionButton = React.forwardRef(function AccordionButton(\n\t{\n\t\tas: Comp = \"button\",\n\t\tchildren,\n\t\tonClick,\n\t\tonKeyDown,\n\t\tonMouseDown,\n\t\tonPointerDown,\n\t\ttabIndex,\n\t\t...props\n\t},\n\tforwardedRef\n) {\n\tlet { onSelectPanel } = useAccordionCtx(\"AccordionButton\");\n\n\tlet {\n\t\tdisabled,\n\t\tbuttonId,\n\t\tbuttonRef: ownRef,\n\t\thandleButtonRefSet,\n\t\tindex,\n\t\tpanelId,\n\t\tstate,\n\t} = useAccordionItemCtx(\"AccordionButton\");\n\n\tlet ref = useComposedRefs(forwardedRef, handleButtonRefSet);\n\n\tfunction handleClick(event: React.MouseEvent) {\n\t\tevent.preventDefault();\n\t\tif (disabled) {\n\t\t\treturn;\n\t\t}\n\t\townRef.current.focus();\n\t\tonSelectPanel(index);\n\t}\n\n\tlet handleKeyDown = useDescendantKeyDown(AccordionDescendantContext, {\n\t\tcurrentIndex: index,\n\t\torientation: \"vertical\",\n\t\tkey: \"element\",\n\t\trotate: true,\n\t\tcallback(element: HTMLElement) {\n\t\t\telement?.focus();\n\t\t},\n\t\tfilter: (button) => !button.disabled,\n\t});\n\n\treturn (\n\t\t<Comp\n\t\t\t// Each accordion header `button` is wrapped in an element with role\n\t\t\t// `heading` that has a value set for `aria-level` that is appropriate\n\t\t\t// for the information architecture of the page.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n\t\t\t// I believe this should be left for apps to handle, since headings\n\t\t\t// are necessarily context-aware. An app can wrap a button inside any\n\t\t\t// arbitrary tag(s).\n\t\t\t// TODO: Revisit documentation and examples\n\t\t\t// @example\n\t\t\t// <div>\n\t\t\t//   <h3>\n\t\t\t//     <AccordionButton>Click Me</AccordionButton>\n\t\t\t//   </h3>\n\t\t\t//   <SomeComponent />\n\t\t\t// </div>\n\n\t\t\t// The title of each accordion header is contained in an element with\n\t\t\t// role `button`. We use an HTML button by default, so we can omit\n\t\t\t// this attribute.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n\t\t\t// role=\"button\"\n\n\t\t\t// The accordion header `button` element has `aria-controls` set to the\n\t\t\t// ID of the element containing the accordion panel content.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n\t\t\taria-controls={panelId}\n\t\t\t// If the accordion panel associated with an accordion header is\n\t\t\t// visible, the header `button` element has `aria-expanded` set to\n\t\t\t// `true`. If the panel is not visible, `aria-expanded` is set to\n\t\t\t// `false`.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n\t\t\taria-expanded={state === AccordionStates.Open}\n\t\t\ttabIndex={disabled ? -1 : tabIndex}\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t\tdata-reach-accordion-button=\"\"\n\t\t\tdata-state={getDataState(state)}\n\t\t\t// If the accordion panel associated with an accordion header is\n\t\t\t// visible, and if the accordion does not permit the panel to be\n\t\t\t// collapsed, the header `button` element has `aria-disabled` set to\n\t\t\t// `true`. We can use `disabled` since we opt for an HTML5 `button`\n\t\t\t// element.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n\t\t\tdisabled={disabled || undefined}\n\t\t\tid={buttonId}\n\t\t\tonClick={composeEventHandlers(onClick, handleClick)}\n\t\t\tonKeyDown={composeEventHandlers(onKeyDown, handleKeyDown)}\n\t\t>\n\t\t\t{children}\n\t\t</Comp>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"button\", AccordionButtonProps>;\n\n/**\n * @see Docs https://reach.tech/accordion#accordionbutton-props\n */\ninterface AccordionButtonProps {\n\t/**\n\t * Typically a text string that serves as a label for the accordion, though\n\t * nested DOM nodes can be passed as well so long as they are valid children\n\t * of interactive elements.\n\t *\n\t * @see https://github.com/w3c/html-aria/issues/54\n\t * @see Docs https://reach.tech/accordion#accordionbutton-children\n\t */\n\tchildren: React.ReactNode;\n}\n\nAccordionButton.displayName = \"AccordionButton\";\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AccordionPanel\n *\n * The collapsible panel in which inner content for an accordion item is\n * rendered.\n *\n * @see Docs https://reach.tech/accordion#accordionpanel\n */\nconst AccordionPanel = React.forwardRef(function AccordionPanel(\n\t{ as: Comp = \"div\", children, ...props },\n\tforwardedRef\n) {\n\tlet { disabled, panelId, buttonId, state } =\n\t\tuseAccordionItemCtx(\"AccordionPanel\");\n\n\treturn (\n\t\t<Comp\n\t\t\thidden={state !== AccordionStates.Open}\n\t\t\t// Optionally, each element that serves as a container for panel content\n\t\t\t// has role `region` and `aria-labelledby` with a value that refers to\n\t\t\t// the button that controls display of the panel.\n\t\t\t// Role `region` is especially helpful to the perception of structure by\n\t\t\t// screen reader users when panels contain heading elements or a nested\n\t\t\t// accordion.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n\n\t\t\t// Avoid using the region role in circumstances that create landmark\n\t\t\t// region proliferation, e.g., in an accordion that contains more than\n\t\t\t// approximately 6 panels that can be expanded at the same time.\n\t\t\t// A user can override this with `role=\"none\"` or `role=\"presentation\"`\n\t\t\t// TODO: Add to docs\n\t\t\trole=\"region\"\n\t\t\taria-labelledby={buttonId}\n\t\t\t{...props}\n\t\t\tref={forwardedRef}\n\t\t\tdata-reach-accordion-panel=\"\"\n\t\t\tdata-disabled={disabled || undefined}\n\t\t\tdata-state={getDataState(state)}\n\t\t\tid={panelId}\n\t\t>\n\t\t\t{children}\n\t\t</Comp>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", AccordionPanelProps>;\n\n/**\n * @see Docs https://reach.tech/accordion#accordionpanel-props\n */\ninterface AccordionPanelProps {\n\t/**\n\t * Inner collapsible content for the accordion item.\n\t *\n\t * @see Docs https://reach.tech/accordion#accordionpanel-children\n\t */\n\tchildren: React.ReactNode;\n}\n\nAccordionPanel.displayName = \"AccordionPanel\";\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Accordion` component to its\n * descendants.\n *\n * @see Docs https://reach.tech/accordion#useaccordioncontext\n */\nfunction useAccordionContext(): AccordionContextValue {\n\tlet { openPanels, accordionId } = useAccordionCtx(\"useAccordionContext\");\n\treturn React.useMemo(() => {\n\t\tlet panels: number[] = [];\n\t\treturn {\n\t\t\tid: accordionId,\n\t\t\topenPanels: panels.concat(openPanels).filter((i) => i >= 0),\n\t\t};\n\t}, [accordionId, openPanels]);\n}\n\n/**\n * A hook that exposes data for a given `AccordionItem` component to its\n * descendants.\n *\n * @see Docs https://reach.tech/accordion#useaccordionitemcontext\n */\nfunction useAccordionItemContext(): AccordionItemContextValue {\n\tlet { index, state } = useAccordionItemCtx(\"useAccordionItemContext\");\n\treturn React.useMemo(\n\t\t() => ({\n\t\t\tindex,\n\t\t\tisExpanded: state === AccordionStates.Open,\n\t\t}),\n\t\t[index, state]\n\t);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction getDataState(state: AccordionStates) {\n\treturn state === AccordionStates.Open ? \"open\" : \"collapsed\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ninterface AccordionContextValue {\n\tid: string | undefined;\n\topenPanels: number[];\n}\n\ninterface AccordionItemContextValue {\n\tindex: number;\n\tisExpanded: boolean;\n}\n\ntype AccordionDescendant = Descendant & {\n\tdisabled: boolean;\n};\n\ntype ButtonRef = React.MutableRefObject<any>;\n\ntype AccordionIndex = number | number[];\n\ninterface InternalAccordionContextValue {\n\taccordionId: string | undefined;\n\topenPanels: AccordionIndex;\n\tonSelectPanel(index: AccordionIndex): void;\n\treadOnly: boolean;\n}\n\ninterface InternalAccordionItemContextValue {\n\tdisabled: boolean;\n\tbuttonId: string;\n\tindex: number;\n\titemId: string;\n\thandleButtonRefSet(refValue: HTMLElement): void;\n\tbuttonRef: ButtonRef;\n\tpanelId: string;\n\tstate: AccordionStates;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type {\n\tAccordionButtonProps,\n\tAccordionContextValue,\n\tAccordionItemContextValue,\n\tAccordionItemProps,\n\tAccordionPanelProps,\n\tAccordionProps,\n};\nexport {\n\tAccordion,\n\tAccordionButton,\n\tAccordionItem,\n\tAccordionPanel,\n\tAccordionStates,\n\tuseAccordionContext,\n\tuseAccordionItemContext,\n};\n"],"mappings":"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","names":[]}