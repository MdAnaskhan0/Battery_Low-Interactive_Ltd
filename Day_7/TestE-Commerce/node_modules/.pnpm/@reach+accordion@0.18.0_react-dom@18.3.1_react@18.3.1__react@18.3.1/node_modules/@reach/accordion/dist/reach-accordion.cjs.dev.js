"use strict";
/**
  * @reach/accordion v0.18.0
  *
  * Copyright (c) 2018-2022, React Training LLC
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE.md file in the root directory of this source tree.
  *
  * @license MIT
  */

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/reach-accordion.tsx
var reach_accordion_exports = {};
__export(reach_accordion_exports, {
  Accordion: () => Accordion,
  AccordionButton: () => AccordionButton,
  AccordionItem: () => AccordionItem,
  AccordionPanel: () => AccordionPanel,
  AccordionStates: () => AccordionStates,
  useAccordionContext: () => useAccordionContext,
  useAccordionItemContext: () => useAccordionItemContext
});
module.exports = __toCommonJS(reach_accordion_exports);
var React = __toESM(require("react"));
var import_utils = require("@reach/utils");
var import_descendants = require("@reach/descendants");
var import_auto_id = require("@reach/auto-id");
var AccordionDescendantContext = (0, import_descendants.createDescendantContext)("AccordionDescendantContext");
var [AccordionProvider, useAccordionCtx] = (0, import_utils.createContext)("Accordion");
var [AccordionItemProvider, useAccordionItemCtx] = (0, import_utils.createContext)("AccordionItem");
var AccordionStates = /* @__PURE__ */ ((AccordionStates2) => {
  AccordionStates2["Open"] = "OPEN";
  AccordionStates2["Collapsed"] = "COLLAPSED";
  return AccordionStates2;
})(AccordionStates || {});
var Accordion = React.forwardRef(function Accordion2(_a, forwardedRef) {
  var _b = _a, {
    as: Comp = "div",
    children,
    defaultIndex,
    index: controlledIndex,
    onChange,
    readOnly = false,
    collapsible = false,
    multiple = false
  } = _b, props = __objRest(_b, [
    "as",
    "children",
    "defaultIndex",
    "index",
    "onChange",
    "readOnly",
    "collapsible",
    "multiple"
  ]);
  let [openPanels, setOpenPanels] = (0, import_utils.useControlledState)({
    controlledValue: controlledIndex,
    defaultValue: () => {
      var _a2;
      if (defaultIndex != null) {
        if (multiple) {
          return Array.isArray(defaultIndex) ? defaultIndex : [defaultIndex];
        } else {
          return Array.isArray(defaultIndex) ? (_a2 = defaultIndex[0]) != null ? _a2 : 0 : defaultIndex;
        }
      }
      if (collapsible) {
        return multiple ? [] : -1;
      }
      return multiple ? [0] : 0;
    },
    calledFrom: "Tabs"
  });
  let [descendants, setDescendants] = (0, import_descendants.useDescendantsInit)();
  let id = (0, import_auto_id.useId)(props.id);
  let onSelectPanel = React.useCallback((index) => {
    onChange && onChange(index);
    setOpenPanels((prevOpenPanels) => {
      index = index;
      if (multiple) {
        prevOpenPanels = prevOpenPanels;
        if (prevOpenPanels.includes(index)) {
          if (prevOpenPanels.length > 1 || collapsible) {
            return prevOpenPanels.filter((i) => i !== index);
          }
        } else {
          return [...prevOpenPanels, index].sort();
        }
      } else {
        prevOpenPanels = prevOpenPanels;
        return prevOpenPanels === index && collapsible ? -1 : index;
      }
      return prevOpenPanels;
    });
  }, [collapsible, multiple, onChange, setOpenPanels]);
  return /* @__PURE__ */ React.createElement(import_descendants.DescendantProvider, {
    context: AccordionDescendantContext,
    items: descendants,
    set: setDescendants
  }, /* @__PURE__ */ React.createElement(AccordionProvider, {
    accordionId: id,
    openPanels,
    onSelectPanel: readOnly ? import_utils.noop : onSelectPanel,
    readOnly
  }, /* @__PURE__ */ React.createElement(Comp, __spreadProps(__spreadValues({}, props), {
    ref: forwardedRef,
    "data-reach-accordion": ""
  }), children)));
});
Accordion.displayName = "Accordion";
var AccordionItem = React.forwardRef(function AccordionItem2(_a, forwardedRef) {
  var _b = _a, { as: Comp = "div", children, disabled = false, index: indexProp } = _b, props = __objRest(_b, ["as", "children", "disabled", "index"]);
  let { accordionId, openPanels, readOnly } = useAccordionCtx("AccordionItem");
  let buttonRef = React.useRef(null);
  let [element, handleButtonRefSet] = (0, import_utils.useStatefulRefValue)(buttonRef, null);
  let descendant = React.useMemo(() => {
    return {
      element,
      disabled
    };
  }, [disabled, element]);
  let index = (0, import_descendants.useDescendant)(descendant, AccordionDescendantContext, indexProp);
  let itemId = (0, import_utils.makeId)(accordionId, index);
  let panelId = (0, import_utils.makeId)("panel", itemId);
  let buttonId = (0, import_utils.makeId)("button", itemId);
  let state = (Array.isArray(openPanels) ? openPanels.includes(index) && "OPEN" /* Open */ : openPanels === index && "OPEN" /* Open */) || "COLLAPSED" /* Collapsed */;
  let context = {
    buttonId,
    buttonRef,
    disabled,
    handleButtonRefSet,
    index,
    itemId,
    panelId,
    state
  };
  return /* @__PURE__ */ React.createElement(AccordionItemProvider, __spreadValues({}, context), /* @__PURE__ */ React.createElement(Comp, __spreadProps(__spreadValues({}, props), {
    ref: forwardedRef,
    "data-reach-accordion-item": "",
    "data-state": getDataState(state),
    "data-disabled": disabled ? "" : void 0,
    "data-read-only": readOnly ? "" : void 0
  }), children));
});
AccordionItem.displayName = "AccordionItem";
var AccordionButton = React.forwardRef(function AccordionButton2(_a, forwardedRef) {
  var _b = _a, {
    as: Comp = "button",
    children,
    onClick,
    onKeyDown,
    onMouseDown,
    onPointerDown,
    tabIndex
  } = _b, props = __objRest(_b, [
    "as",
    "children",
    "onClick",
    "onKeyDown",
    "onMouseDown",
    "onPointerDown",
    "tabIndex"
  ]);
  let { onSelectPanel } = useAccordionCtx("AccordionButton");
  let {
    disabled,
    buttonId,
    buttonRef: ownRef,
    handleButtonRefSet,
    index,
    panelId,
    state
  } = useAccordionItemCtx("AccordionButton");
  let ref = (0, import_utils.useComposedRefs)(forwardedRef, handleButtonRefSet);
  function handleClick(event) {
    event.preventDefault();
    if (disabled) {
      return;
    }
    ownRef.current.focus();
    onSelectPanel(index);
  }
  let handleKeyDown = (0, import_descendants.useDescendantKeyDown)(AccordionDescendantContext, {
    currentIndex: index,
    orientation: "vertical",
    key: "element",
    rotate: true,
    callback(element) {
      element == null ? void 0 : element.focus();
    },
    filter: (button) => !button.disabled
  });
  return /* @__PURE__ */ React.createElement(Comp, __spreadProps(__spreadValues({
    "aria-controls": panelId,
    "aria-expanded": state === "OPEN" /* Open */,
    tabIndex: disabled ? -1 : tabIndex
  }, props), {
    ref,
    "data-reach-accordion-button": "",
    "data-state": getDataState(state),
    disabled: disabled || void 0,
    id: buttonId,
    onClick: (0, import_utils.composeEventHandlers)(onClick, handleClick),
    onKeyDown: (0, import_utils.composeEventHandlers)(onKeyDown, handleKeyDown)
  }), children);
});
AccordionButton.displayName = "AccordionButton";
var AccordionPanel = React.forwardRef(function AccordionPanel2(_a, forwardedRef) {
  var _b = _a, { as: Comp = "div", children } = _b, props = __objRest(_b, ["as", "children"]);
  let { disabled, panelId, buttonId, state } = useAccordionItemCtx("AccordionPanel");
  return /* @__PURE__ */ React.createElement(Comp, __spreadProps(__spreadValues({
    hidden: state !== "OPEN" /* Open */,
    role: "region",
    "aria-labelledby": buttonId
  }, props), {
    ref: forwardedRef,
    "data-reach-accordion-panel": "",
    "data-disabled": disabled || void 0,
    "data-state": getDataState(state),
    id: panelId
  }), children);
});
AccordionPanel.displayName = "AccordionPanel";
function useAccordionContext() {
  let { openPanels, accordionId } = useAccordionCtx("useAccordionContext");
  return React.useMemo(() => {
    let panels = [];
    return {
      id: accordionId,
      openPanels: panels.concat(openPanels).filter((i) => i >= 0)
    };
  }, [accordionId, openPanels]);
}
function useAccordionItemContext() {
  let { index, state } = useAccordionItemCtx("useAccordionItemContext");
  return React.useMemo(() => ({
    index,
    isExpanded: state === "OPEN" /* Open */
  }), [index, state]);
}
function getDataState(state) {
  return state === "OPEN" /* Open */ ? "open" : "collapsed";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Accordion,
  AccordionButton,
  AccordionItem,
  AccordionPanel,
  AccordionStates,
  useAccordionContext,
  useAccordionItemContext
});
//# sourceMappingURL=reach-accordion.cjs.dev.js.map